package com.infosys.anchal.todoList.controller;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.infosys.anchal.todoList.entity.Task;
import com.infosys.anchal.todoList.entity.User;
import com.infosys.anchal.todoList.repo.TaskRepo;

import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping("/tasks")
public class TaskController {

    private final TaskRepo taskRepository;

    @Autowired
    public TaskController(TaskRepo taskRepository) {
        this.taskRepository = taskRepository;
    }

    private boolean isUserLoggedIn(HttpSession session) {
        return session.getAttribute("user") != null;
    }

    @GetMapping
    public String listTasks(Model model, HttpSession session) {
        if (!isUserLoggedIn(session)) {
            return "redirect:/login";
        }

        User user = (User) session.getAttribute("user");
        List<Task> userTasks = taskRepository.findByUser(user);
        model.addAttribute("userTasks", userTasks);

        return "taskList";
    }

    @GetMapping("/create")
    public String showTaskForm(Model model) {
        model.addAttribute("task", new Task());
        return "taskForm";
    }

    @PostMapping("/create")
    public String createTask(@ModelAttribute Task task, HttpSession session, Model model) {
        if (!isUserLoggedIn(session)) {
            return "redirect:/login";
        }

        User user = (User) session.getAttribute("user");
        task.setUser(user);
        taskRepository.save(task);

        List<Task> userTasks = taskRepository.findByUser(user);
        model.addAttribute("userTasks", userTasks);

        return "taskList";
    }
    
    @GetMapping("/delete/{taskId}")
    public String deleteTask(@PathVariable int taskId, HttpSession session) {
        if (!isUserLoggedIn(session)) {
            return "redirect:/login";
        }
        Task task = taskRepository.findById(taskId).orElse(null);
        if (task != null) {
            taskRepository.delete(task);
        }
        return "redirect:/tasks"; 
    }
    
    @GetMapping("/edit/{taskId}")
    public String showEditForm(@PathVariable int taskId, HttpSession session, Model model) {
        if (!isUserLoggedIn(session)) {
            return "redirect:/login";
        }
        
        User user = (User) session.getAttribute("user");
        Task task = taskRepository.findById(taskId).orElse(null);
        
        if (task != null && task.getUser().getId() == user.getId()) {
            model.addAttribute("task", task);
            return "editTask";
        } else {
            return "redirect:/tasks"; 
        }
    }
    
    @PostMapping("/edit/{taskId}")
    public String editTask(@PathVariable int taskId, @ModelAttribute Task updatedTask, HttpSession session) {
        if (!isUserLoggedIn(session)) {
            return "redirect:/login";
        }
        User user = (User) session.getAttribute("user");
        Task existingTask = taskRepository.findById(taskId).orElse(null);
        if (existingTask != null && existingTask.getUser().getId() == user.getId()) {
            existingTask.setTitle(updatedTask.getTitle());
            existingTask.setDescription(updatedTask.getDescription());
            existingTask.setCompleted(updatedTask.isCompleted());
            taskRepository.save(existingTask);
        }
        return "redirect:/tasks";
    }
    
    @GetMapping("/search")
    public String searchTasks(@RequestParam(required = false) String title,
                              @RequestParam(required = false) String description,
                              @RequestParam(required = false) Boolean completed,
                              Model model, HttpSession session) {

        if (!isUserLoggedIn(session)) {
            return "redirect:/login";
        }

        User user = (User) session.getAttribute("user");
        List<Task> filteredTasks = taskRepository.findByUser(user);

        if (title != null && !title.isEmpty()) {
            filteredTasks = taskRepository.findByUserAndTitle(user, title);
        } else if (description != null && !description.isEmpty()) {
            filteredTasks = taskRepository.findByUserAndDescription(user, description);
        } else if (completed != null) {
            filteredTasks = taskRepository.findByUserAndCompleted(user, completed);
        }

        model.addAttribute("userTasks", filteredTasks);

        return "taskList";
    }


}
